name: Terraform

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./infra

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: terraform fmt
        id: fmt
        run: terraform fmt -check -recursive

      - name: terraform init
        id: init
        run: terraform init -input=false -no-color

      - name: terraform validate
        id: validate
        run: terraform validate -no-color

      - name: terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: terraform plan -input=false -no-color

      - name: Update PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        continue-on-error: true
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### Terraform Plan
            <details>
            <summary>Expand</summary>

            \`\`\`
            ${process.env.PLAN.trim()}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({ issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: output })

      - name: Check For Success
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: terraform apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false -no-color
